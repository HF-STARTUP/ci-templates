name: Reusable Laravel Docker CI/CD

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      image_repository:
        required: true
        type: string
      image_tag:
        required: true
        type: string
      server_path:
        required: true
        type: string
      compose_file:
        required: false
        type: string
        default: docker-compose.yml
    secrets:
      VPS_SSH_KEY:
        required: true
      VPS_HOST:
        required: true
      VPS_USER:
        required: true
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      DOCKER_REGISTRY:
        required: false

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v3
        with:
          php-version: '8.2'
          extensions: mbstring, pdo_mysql, bcmath, intl
      - run: composer install --prefer-dist --no-interaction --no-progress
      - run: php artisan test --no-interaction

  build_and_push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ inputs.image_repository }}:${{ inputs.image_tag }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
      - run: |
          echo "${{ secrets.VPS_SSH_KEY }}" > /tmp/vps_key
          chmod 600 /tmp/vps_key
      - uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: /tmp/vps_key
          script: |
            cd ${{ inputs.server_path }}
            echo "IMAGE_TAG=${{ inputs.image_tag }}" > .env.deploy
            docker-compose --env-file .env.deploy -f "${{ inputs.compose_file }}" pull
            docker-compose --env-file .env.deploy -f "${{ inputs.compose_file }}" up -d --remove-orphans
            docker image prune -f

